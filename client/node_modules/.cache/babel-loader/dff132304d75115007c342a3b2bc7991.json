{"ast":null,"code":"import React,{useState,useEffect}from'react';import axios from'axios';// Import Axios for API calls\nimport ProductForm from'./components/ProductForm';import OrderSummary from'./components/OrderSummary';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[products,setProducts]=useState([]);// State to store products fetched from the backend\nconst[order,setOrder]=useState([]);// Fetch products from the backend API when the component mounts\nuseEffect(()=>{axios.get('http://localhost:5000/api/products').then(response=>{setProducts(response.data);// Update the products state with data from API\n}).catch(error=>{console.error('Error fetching products:',error);});},[]);// Empty dependency array means this will run once when the component mounts\nconst addProductToOrder=item=>{const product=products.find(p=>p._id===item.product);setOrder([...order,{product,quantity:item.quantity}]);};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"POS System\"}),/*#__PURE__*/_jsx(ProductForm,{products:products,onAddProduct:addProductToOrder}),/*#__PURE__*/_jsx(OrderSummary,{order:order})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","axios","ProductForm","OrderSummary","jsx","_jsx","jsxs","_jsxs","App","products","setProducts","order","setOrder","get","then","response","data","catch","error","console","addProductToOrder","item","product","find","p","_id","quantity","className","children","onAddProduct"],"sources":["D:/mern/grow/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios'; // Import Axios for API calls\nimport ProductForm from './components/ProductForm';\nimport OrderSummary from './components/OrderSummary';\n\nfunction App() {\n  const [products, setProducts] = useState([]); // State to store products fetched from the backend\n  const [order, setOrder] = useState([]);\n\n  // Fetch products from the backend API when the component mounts\n  useEffect(() => {\n    axios.get('http://localhost:5000/api/products')\n      .then((response) => {\n        setProducts(response.data); // Update the products state with data from API\n      })\n      .catch((error) => {\n        console.error('Error fetching products:', error);\n      });\n  }, []); // Empty dependency array means this will run once when the component mounts\n\n  const addProductToOrder = (item) => {\n    const product = products.find(p => p._id === item.product);\n    setOrder([...order, { product, quantity: item.quantity }]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>POS System</h1>\n      <ProductForm products={products} onAddProduct={addProductToOrder} />\n      <OrderSummary order={order} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,MAAO,CAAAC,KAAK,KAAM,OAAO,CAAE;AAC3B,MAAO,CAAAC,WAAW,KAAM,0BAA0B,CAClD,MAAO,CAAAC,YAAY,KAAM,2BAA2B,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAErD,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGX,QAAQ,CAAC,EAAE,CAAC,CAAE;AAC9C,KAAM,CAACY,KAAK,CAAEC,QAAQ,CAAC,CAAGb,QAAQ,CAAC,EAAE,CAAC,CAEtC;AACAC,SAAS,CAAC,IAAM,CACdC,KAAK,CAACY,GAAG,CAAC,oCAAoC,CAAC,CAC5CC,IAAI,CAAEC,QAAQ,EAAK,CAClBL,WAAW,CAACK,QAAQ,CAACC,IAAI,CAAC,CAAE;AAC9B,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,EAAK,CAChBC,OAAO,CAACD,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAClD,CAAC,CAAC,CACN,CAAC,CAAE,EAAE,CAAC,CAAE;AAER,KAAM,CAAAE,iBAAiB,CAAIC,IAAI,EAAK,CAClC,KAAM,CAAAC,OAAO,CAAGb,QAAQ,CAACc,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACC,GAAG,GAAKJ,IAAI,CAACC,OAAO,CAAC,CAC1DV,QAAQ,CAAC,CAAC,GAAGD,KAAK,CAAE,CAAEW,OAAO,CAAEI,QAAQ,CAAEL,IAAI,CAACK,QAAS,CAAC,CAAC,CAAC,CAC5D,CAAC,CAED,mBACEnB,KAAA,QAAKoB,SAAS,CAAC,KAAK,CAAAC,QAAA,eAClBvB,IAAA,OAAAuB,QAAA,CAAI,YAAU,CAAI,CAAC,cACnBvB,IAAA,CAACH,WAAW,EAACO,QAAQ,CAAEA,QAAS,CAACoB,YAAY,CAAET,iBAAkB,CAAE,CAAC,cACpEf,IAAA,CAACF,YAAY,EAACQ,KAAK,CAAEA,KAAM,CAAE,CAAC,EAC3B,CAAC,CAEV,CAEA,cAAe,CAAAH,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module"}